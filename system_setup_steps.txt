These notes were made assuming that the reader is using Linux, preferably an Ubuntu variant like Ubuntu-MATE, which is the best :) If you insist on using Windows, then these notes are not for you; try installing Anaconda for example. It seems to exist solely to help Windows users do scientific/engineering coding in Python. If you are using Linux, however, there is no need for anything like Anaconda. Python 3 provides a native way to set up a virtual environment called 'venv', and for those stuck using Python 2.7, there is a package named 'virtualenv'. Below we will build Python 3 on our system in the /opt directory, where it will be out of the way and we won't have to think about it anymore. Then we will install a hidden virtual envirionment in our home dir which links to the /opt version we installed. Then we will use pip to install any package that we need into that virtual environment. Easy-peasy and we didn't have to install extra stuff like Anaconda to do hand-holding for us.


###################################################################################################
# Set up GPU support on a fresh Ubuntu install
(if you don't have a GPU, then SKIP THIS SECTION and proceed to "Download and Build Python...")

# Download CUDA from:
    https://developer.nvidia.com/cuda-downloads
# Install CUDA 8 per instructions at:
    http://docs.nvidia.com/cuda/cuda-installation-guide-linux/#axzz4ZXLKBcAN

# Add this to your .bashrc file:
#CUDA
export PATH=/usr/local/cuda-8.0/bin${PATH:+:${PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64\
                         ${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

# restart system

# Download cudnn from:
    https://developer.nvidia.com/rdp/cudnn-download
# uncompress and copy the cudnn files to appropriate dirs in /usr/local/cuda-8.0/
###################################################################################################


# Download and Build Python 3.6.1 on Your System. Then set up a Virtual Environment

# before installing Python, install the following dependencies
 $ sudo apt-get update
 $ sudo apt-get upgrade
 $ sudo apt-get install libbz2-dev liblzma-dev libsqlite3-dev libncurses5-dev libgdbm-dev zlib1g-dev libreadline-dev libssl-dev libssl-dev make build-essential libssl-dev zlib1g-dev libbz2-dev libsqlite3-dev cmake unzip git pkg-config gdb
 $ sudo apt-get install tcl-dev tk-dev python-tk python3-tk python3-tksnack
 $ sudo apt-get install libopenblas-dev liblapack-dev
 $ sudo apt-get install libgtk-3-dev


# make a directory in /opt to build our new Python
 $ sudo mkdir /opt/python3.6
 $ sudo mkdir /opt/python3.6/lib

# download and uncompress Python
 $ tar xvf Python-$RELEASE.tar.xz
 $ cd Python-$RELEASE
(NOTE: we must run configure with the --enable-share flag in order to support theano)

# configure the install with our settings
 $ ./configure --prefix=/opt/python3.6 --enable-shared LDFLAGS="-Wl,-rpath /opt/python3.6/lib"
 $ make
 $ make test # you don't have to do this (takes a while), but it might be interesting to do it once
 $ sudo make altinstall # do NOT "make install"; it will overwrite your existing Python used by your system

# finished with this directory, cd back out and delete it
 $ cd ~
 $ sudo rm -rf Python3.6.1


# Add this to your .bashrc (some of it will be used later). Replace '/home/username' with the path to your home directory. Replace the Python version with the version you installed.

    # PYTHON 3.6.1
    alias py36='/home/username/.ml36/bin/python3.6' # use this python
    alias pip36='/home/username/.ml36/bin/pip3.6' # to install packages within our venv
    alias jupyter-notebook_36='/home/username/.ml36/bin/jupyter-notebook' # Jupyter Notebook
    alias jupyter-themer='/home/username/.ml36/bin/jupyter-themer' # to change Jupyter theme
    # activate the py36 virtual environment
    act_ml36 () {
      . /home/username/.ml36/bin/./activate
    }
    # deactivate the virtual environment
    alias deact='deactivate'

    # the Atom editor
    alias atom36='act_ml36; atom; deactivate'


# reload .bashrc
 $ source ~/.bashrc


# Setup virtual environment and work from within it. I decided to call my virtual environment .ml36, because I do Machine Learning (ML), but call yours whatever you like. I preceded the name with a . to make it a hidden dir, but you don't have to do this.

 $ /opt/python3.6/bin/python3.6 -m venv .ml36  # to make the virtual envirionment


# Test that python works.
 $ py36

# You should be in the Python interpreter now and see the correct version number.

Python 3.6.1 (default, Mar 28 2017, 10:57:38) 
[GCC 4.8.4] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>

# Next, enter "import this" in the console

>>> import this
The Zen of Python, by Tim Peters
...

# type CTRL+D to exit back to shell prompt.



# Use one of the aliases you created in your .bashrc ifle to activate the virtual environment.
 $ act_ml36

# Now the virtual environment is activated. We need to do this before we install packages so that
# they will be installed in the right place, and therefore be useable by our virtual Python

# Install some necessary / useful packages
 $ pip36 install numpy scipy
 $ pip36 install scikit-learn
 $ pip36 install pillow
 $ pip36 install h5py
 $ pip36 install cython
 $ pip36 install numpydoc
 $ pip36 install scikit-image
 $ pip36 install nose
 $ pip36 install jupyter
 $ pip36 install jupyter-themer
 $ pip36 install pandas


# Install TensorFlow
EITHER
 $ pip36 install --upgrade tensorflow
OR
 $ pip36 install --upgrade tensorflow-gpu


# Install Keras
pip36 install keras


# Now that all is installed, type deactivate the virtual environment.
 $ deact


# Test the install
 $ py36

# import keras. Is the tensorflow backend used?
# CTRL+D to exit.


# Change the Jupyter colors if you wish (OPTIONAL). I like 'midnight'
 $ jupyter-themer_36 -c 'midnight'

###################################################################################################

# Install Atom
download the .deb from https://atom.io/
# you can simply right-click to install it.
# Did you notice that earlier we put an alias in our .bashrc for Atom? We did this so that Atom would open using our new version of Python instead of the one installed by default on our system.
 $ atom36

###################################################################################################

if you find yourself needing XGBoost for machine learning tasks, here is how it's installed:

git clone --recursive https://github.com/dmlc/xgboost
cd xgboost
make
cd python-package
act_ml36
py36 setup.py install
deact

###################################################################################################
# That's most everything you'll need to get started with Machine Learning. Since I often work with sequences of images though, I also want to install OpenCV in my virtual environment.

# Install these dependencies first
 $ sudo apt-get install build-essential cmake pkg-config
 $ sudo apt-get install libtiff-dev libjasper-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libjpeg-dev libpng-dev
 $ sudo apt-get install libatlas-base-dev gfortran
 $ sudo apt-get install liblapacke-dev checkinstall
 $ sudo apt-get install python3.6-dev

# get OpenCV from the Git Repository
 $ cd ~
 $ wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.2.0.zip
 $ unzip opencv.zip
 $ wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.2.0.zip
 $ unzip opencv_contrib.zip

 $ cd opencv-3.2.0
 $ mkdir build
 $ cd build
 $ act_ml36
 $ cmake -D CMAKE_BUILD_TYPE=RELEASE \
         -D CMAKE_INSTALL_PREFIX=/home/username/.ml36/lib/python3.6/site-packages/opencv \
         -D INSTALL_PYTHON_EXAMPLES=ON \
         -D INSTALL_C_EXAMPLES=OFF \
         -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.2.0/modules \
         -D PYTHON_EXECUTABLE=/opt/python3.6/bin/python3.6 \
         -D PYTHON_INCLUDE=/opt/python3.6/include/python3.6m \
         -D PYTHON_LIBRARY=/opt/python3.6/lib/libpython3.6.so \
         -D PYTHON_PACKAGES_PATH=/home/username/.ml36/lib/python3.6/site-packages \
         -D PYTHON_NUMPY_INCLUDE_DIR=/home/username/.ml36/lib/python3.6/site-packages/numpy/core/include/numpy \
         -D BUILD_EXAMPLES=ON ..
 $ make -j4
((if any errors encountered, try make with only one core:  make clean , make))

 $ make install
 $ sudo ldconfig

# make symlink to OpenCV in new Python site-packages dir
 $ cd /home/username/.ml36/lib/python3.6/site-packages
 $ ln -s /home/username/.ml36/lib/python3.6/site-packages/opencv/lib/python3.6/site-packages/cv2.cpython-36m-x86_64-linux-gnu.so cv2.so

 $ deact
